name: Terraform Azure Role-Assignment CI/CD

on:
  push:
    branches:
      - stage
  workflow_dispatch:
    inputs:
      ENV:
        description: "Target environment (dev or prod)"
        required: true
        default: "dev"
      RESOURCE:
        description: "Which resource to deploy? (vnet, aks, bastion, acr, aks-rbac or all)"
        required: true
        default: "bastion"
      confirm_apply:
        description: "Type 'yes' to apply resources"
        required: true
        default: "no"

jobs:
  plan:
    name: Terraform Plan and Cost Estimate
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.event.inputs.ENV }}
      RESOURCE: ${{ github.event.inputs.RESOURCE }}
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      # - name: Terraform Init
      #   run: terraform -chdir=terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }} init
      - name: Terraform Init
        run: |
          TF_DIR="terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }}"
          if [ ! -d "$TF_DIR" ]; then
            echo "ERROR: Terraform directory $TF_DIR does not exist!"
            exit 1
          fi
          terraform -chdir="$TF_DIR" init
      # - name: Terraform Init
      #   run: terraform init
      # - name: Terraform Init
      #   run: terraform -chdir=terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }} init
      
      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: |
          TF_DIR=terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }}
          VAR_FILE="$TF_DIR/terraform.tfvars"
          if [ ! -f "$VAR_FILE" ]; then
          echo "ERROR: $VAR_FILE not found!"
          exit 1
          fi
          terraform -chdir="$TF_DIR" plan -var-file="$VAR_FILE" -out=tfplan.binary

      # - name: Terraform Plan
      #   id: tfplan
      #   run: |
      #     VAR_FILE="terraform.tfvars"
      #     if [ -f "$VAR_FILE" ]; then
      #       echo "Using $VAR_FILE"
      #     else
      #       echo "ERROR: $VAR_FILE not found!"
      #       exit 1
      #     fi
      #     terraform plan -var-file="$VAR_FILE" -out=tfplan.binary
      #     terraform show -json tfplan.binary > plan.json
      #     echo "plan_created=true" >> $GITHUB_OUTPUT

      - name: Upload Terraform Plan Files
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-files
          path: |
            tfplan.binary
            plan.json

      - name: Setup Infracost
        uses: infracost/actions/setup@v2.1.0
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      - name: Run Infracost Breakdown with Usage
        run: |
          infracost breakdown \
            --path=plan.json \
            --format=table \
            --out-file=infracost-report.txt

      - name: Upload Infracost Report artifact
        uses: actions/upload-artifact@v4
        with:
          name: infracost-report
          path: infracost-report.txt

      - name: Show Infracost report
        run: cat infracost-report.txt

  apply:
    name: Terraform Apply with Approval
    needs: plan
    runs-on: ubuntu-latest
    env:
      ENV: ${{ github.event.inputs.ENV }}
      RESOURCE: ${{ github.event.inputs.RESOURCE }}
    defaults:
      run:
        working-directory: terraform/environments/${{ github.event.inputs.ENV }}/${{ github.event.inputs.RESOURCE }}
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_apply == 'yes' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download Terraform plan files
        uses: actions/download-artifact@v4
        with:
          name: tfplan-files
          path: .

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          VAR_FILE="terraform.tfvars"
          if [ -f "$VAR_FILE" ]; then
            echo "Using $VAR_FILE"
          else
            echo "ERROR: $VAR_FILE not found!"
            exit 1
          fi
          terraform apply -var-file="$VAR_FILE" -auto-approve tfplan.binary
